from math import log2

fn get_beta(precision: Int, ez: Float64) -> Float64:
    """Get the beta constant for a given precision and empirical zero ratio."""
    var zl = log2(ez + 1)
    var zl2 = zl * zl
    var zl3 = zl2 * zl
    var zl4 = zl3 * zl
    var zl5 = zl4 * zl
    var zl6 = zl5 * zl
    var zl7 = zl6 * zl

    if precision == 4:
        return -0.582581413904517*ez + -1.935300357560050*zl + 
               11.079323758035073*zl2 + -22.131357446444323*zl3 + 
               22.505391846630037*zl4 + -12.000723834917984*zl5 + 
               3.220579408194167*zl6 + -0.342225302271235*zl7
    elif precision == 5:
        return -0.7518999460733967*ez + -0.9590030077748760*zl + 
               5.5997371322141607*zl2 + -8.2097636999765520*zl3 + 
               6.5091254894472037*zl4 + -2.6830293734323729*zl5 + 
               0.5612891113138221*zl6 + -0.0463331622196545*zl7
    elif precision == 6:
        return 29.8257900969619634*ez + -31.3287083337725925*zl + 
               -10.5942523036582283*zl2 + -11.5720125689099618*zl3 + 
               3.8188754373907492*zl4 + -2.4160130328530811*zl5 + 
               0.4542208940970826*zl6 + -0.0575155452020420*zl7
    elif precision == 7:
        return 2.8102921290820060*ez + -3.9780498518175995*zl + 
               1.3162680041351582*zl2 + -3.9252486335805901*zl3 + 
               2.0080835753946471*zl4 + -0.7527151937556955*zl5 + 
               0.1265569894242751*zl6 + -0.0109946438726240*zl7
    elif precision == 8:
        return 1.00633544887550519*ez + -2.00580666405112407*zl + 
               1.64369749366514117*zl2 + -2.70560809940566172*zl3 + 
               1.39209980244222598*zl4 + -0.46470374272183190*zl5 + 
               0.07384282377269775*zl6 + -0.00578554885254223*zl7
    elif precision == 9:
        return -0.09415657458167959*ez + -0.78130975924550528*zl + 
               1.71514946750712460*zl2 + -1.73711250406516338*zl3 + 
               0.86441508489048924*zl4 + -0.23819027465047218*zl5 + 
               0.03343448400269076*zl6 + -0.00207858528178157*zl7
    elif precision == 10:
        return -0.25935400670790054*ez + -0.52598301999805808*zl + 
               1.48933034925876839*zl2 + -1.29642714084993571*zl3 + 
               0.62284756217221615*zl4 + -0.15672326770251041*zl5 + 
               0.02054415903878563*zl6 + -0.00112488483925502*zl7
    elif precision == 11:
        return -0.432325553856025*ez + -0.108450736399632*zl + 
               0.609156550741120*zl2 + -0.0165687801845180*zl3 + 
               -0.0795829341087617*zl4 + 0.0471830602102918*zl5 + 
               -0.00781372902346934*zl6 + 0.000584268708489995*zl7
    elif precision == 12:
        return -0.384979202588598*ez + 0.183162233114364*zl + 
               0.130396688841854*zl2 + 0.0704838927629266*zl3 + 
               -0.0089589397146453*zl4 + 0.0113010036741605*zl5 + 
               -0.00194285569591290*zl6 + 0.000225435774024964*zl7
    elif precision == 13:
        return -0.41655270946462997*ez + -0.22146677040685156*zl + 
               0.38862131236999947*zl2 + 0.45340979746062371*zl3 + 
               -0.36264738324476375*zl4 + 0.12304650053558529*zl5 + 
               -0.01701540384555510*zl6 + 0.00102750367080838*zl7
    elif precision == 14:
        return -0.371009760230692*ez + 0.00978811941207509*zl + 
               0.185796293324165*zl2 + 0.203015527328432*zl3 + 
               -0.116710521803686*zl4 + 0.0431106699492820*zl5 + 
               -0.00599583540511831*zl6 + 0.000449704299509437*zl7
    elif precision == 15:
        return -0.38215145543875273*ez + -0.89069400536090837*zl + 
               0.37602335774678869*zl2 + 0.99335977440682377*zl3 + 
               -0.65577441638318956*zl4 + 0.18332342129703610*zl5 + 
               -0.02241529633062872*zl6 + 0.00121399789330194*zl7
    elif precision == 16:
        return -0.37331876643753059*ez + -1.41704077448122989*zl + 
               0.40729184796612533*zl2 + 1.56152033906584164*zl3 + 
               -0.99242233534286128*zl4 + 0.26064681399483092*zl5 + 
               -0.03053811369682807*zl6 + 0.00155770210179105*zl7
    else:
        # For larger register counts, use the standard beta correction
        var num_registers = 1 << precision
        return 0.7213 / (1.0 + 1.079 / Float64(num_registers)) 